{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vinh\\\\Documents\\\\Code\\\\chatbot-smartChat\\\\chat-box\\\\src\\\\components\\\\Messages.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { Message } from \"./Message\";\nimport { BotMessage } from \"./BotMessage\";\nimport { ChatContext } from \"../context/ChatContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Messages = () => {\n  _s();\n  const {\n    conversationId\n  } = useContext(ChatContext);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const scrollRef = useRef();\n  useEffect(() => {\n    var _scrollRef$current;\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const fetchData = async () => {\n    const response = await fetch(`http://localhost:5000/get_messages/${conversationId}`);\n    const data = await response.json();\n    console.log(data);\n    return data.messages;\n  };\n  useEffect(() => {\n    if (conversationId) {\n      fetchData().then(fetchedMessages => {\n        setMessages(fetchedMessages);\n      });\n    }\n  }, [conversationId]);\n  const handleAddNewChat = async () => {\n    if (conversationId && newMessage !== \"\") {\n      setSending(true);\n      setNewMessage(\"\");\n      console.log(\"ready\");\n      try {\n        const response = await fetch(\"http://localhost:5000/chatbot\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            conversation_id: conversationId,\n            input_text: newMessage\n          })\n        });\n        if (response.status === 200) {\n          const data = await response.json();\n          setMessages(prevMessages => [...prevMessages, {\n            text: newMessage,\n            response: data.response\n          }]);\n          console.log(messages);\n        } else {\n          console.log(\"Error sending message:\", response.status);\n        }\n      } catch (error) {\n        console.log(\"Error sending message:\", error);\n      } finally {\n        setSending(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.length > 0 && messages.map((value, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Message, {\n            text: value.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(BotMessage, {\n            text: value.response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something ...\",\n        value: newMessage,\n        onChange: e => {\n          setNewMessage(e.target.value);\n        },\n        onKeyPress: e => {\n          if (e.key === \"Enter\") {\n            handleAddNewChat();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddNewChat,\n          disabled: sending,\n          children: sending ? \"Sending...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Messages, \"wUiclmrSCX6VbpFraPO8AxlKRUA=\");\n_c = Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useContext","useEffect","useRef","useState","Message","BotMessage","ChatContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Messages","_s","conversationId","messages","setMessages","newMessage","setNewMessage","sending","setSending","scrollRef","_scrollRef$current","current","scrollIntoView","behavior","fetchData","response","fetch","data","json","console","log","then","fetchedMessages","handleAddNewChat","method","headers","body","JSON","stringify","conversation_id","input_text","status","prevMessages","text","error","children","className","length","map","value","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","onChange","e","target","onKeyPress","key","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Vinh/Documents/Code/chatbot-smartChat/chat-box/src/components/Messages.jsx"],"sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Message } from \"./Message\";\r\nimport { BotMessage } from \"./BotMessage\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\n\r\nexport const Messages = () => {\r\n  const { conversationId } = useContext(ChatContext);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [sending, setSending] = useState(false);\r\n  const scrollRef = useRef();\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const fetchData = async () => {\r\n    const response = await fetch(\r\n      `http://localhost:5000/get_messages/${conversationId}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data.messages;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (conversationId) {\r\n      fetchData().then((fetchedMessages) => {\r\n        setMessages(fetchedMessages);\r\n      });\r\n    }\r\n  }, [conversationId]);\r\n  const handleAddNewChat = async () => {\r\n    if (conversationId && newMessage !== \"\") {\r\n      setSending(true);\r\n      setNewMessage(\"\");\r\n      console.log(\"ready\");\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/chatbot\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            conversation_id: conversationId,\r\n            input_text: newMessage,\r\n          }),\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const data = await response.json();\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: newMessage, response: data.response },\r\n          ]);\r\n          console.log(messages);\r\n        } else {\r\n          console.log(\"Error sending message:\", response.status);\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error sending message:\", error);\r\n      } finally {\r\n        setSending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"messages\">\r\n        {messages.length > 0 &&\r\n          messages.map((value, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Message text={value.text} />\r\n                <BotMessage text={value.response} />\r\n              </div>\r\n            );\r\n          })}\r\n        <div ref={scrollRef}></div>\r\n      </div>\r\n      <div className=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type something ...\"\r\n          value={newMessage}\r\n          onChange={(e) => {\r\n            setNewMessage(e.target.value);\r\n          }}\r\n          onKeyPress={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              handleAddNewChat();\r\n            }\r\n          }}\r\n        />\r\n        <div className=\"send\">\r\n          <button onClick={handleAddNewChat} disabled={sending}>\r\n            {sending ? \"Sending...\" : \"Send\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}